<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_307427_table_a_0.anonymizerUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>anonymizerUtil</name>
        <script><![CDATA[var anonymizerUtil = Class.create();
anonymizerUtil.prototype = {
    initialize: function() {
    },
	
	/**
	Journal fields...
	*/
	JFLIST: ["work_notes", "comments"],
	
	getTargetFields:function(table){
		var supportedFieldTypes= gs.getProperty("x_307427_table_a_0.supported.Internal.field.type")
		.replace(/\s/gm, "")
		.split(",") || ["string"] /*minimum by default*/;
		var parentTable =  new GlideTableHierarchy(table).getBase(); 
		var fieldNames=[];
		if(supportedFieldTypes.indexOf("journal_input") != -1){
			fieldNames = ["work_notes", "comments"];
		}
		
		var recObj = new GlideRecord(table);
		recObj.setLimit(1);
		recObj.query();
		if(recObj.next()){
			for (var key in recObj) {
				
				if(recObj[key] && recObj[key] != ""){
					var type = recObj.getElement(key).getED().getInternalType();
					if(supportedFieldTypes.indexOf(type) != -1) {
						if(fieldNames.indexOf(key) == -1)
						fieldNames.push(key);
					}
				}
			}
		}
		
		if(table != parentTable){
			var recObjParent = new GlideRecord(parentTable);
			recObjParent.setLimit(1);
			recObjParent.query();
			if(recObjParent.next()){
				for (key in recObjParent) {
					//gs.info(parentTable + " ---> " +key + " --> type: " + recObjParent.getElement(key).getED().getInternalType())
					if(recObjParent[key] && recObjParent[key] != ""){
						type = recObjParent.getElement(key).getED().getInternalType();
						if(supportedFieldTypes.indexOf(type) != -1) {
							if(fieldNames.indexOf(key) == -1 && recObj[key] && recObj[key] != ""){
								fieldNames.push(key);
							}
						}
					}
				}
			}	
		}
		return fieldNames;
	},
	
	setJournal:function(recordId, field, oldData, newData){
		var rec = new GlideRecord('sys_history_line');
		
		if(field == "work_notes") oldData =oldData.split("(Work notes)\n")[1];
		if(field == "comments") oldData = oldData.split("(Additional comments)\n")[1];
		var q= 'set.id='+recordId+'^field='+field+'^new=' + oldData.trim();
		rec.addEncodedQuery(q);
		rec.query();
		if(rec.next()){
			rec["new"] = newData;
			rec.update();
		}
	},

	evaluatorChatgpt:function(patternGr, text){
		var evaluator = new GlideScopedEvaluator();
		evaluator.putVariable("str", text);
		return evaluator.evaluateScript(patternGr, 'custom_algorithm', null);
	},

	anonymize:function(configGr){
		try{
			configGr.processing= true;
			configGr.update();
			
			var counter= 0;
			var that= this;
			var table= configGr.getValue("table");
			var q= configGr.getValue("filter");
			var fields= this.getTargetFields(table);
			var patternGr= configGr.patterns.getRefRecord();
		
			var patternAlgo= patternGr.getValue("algorithm");
			var patternRegxStr= patternGr.getValue("regex");
			var rgx= new RegExp(patternRegxStr, 'gm');
			var digest = new GlideDigest();

			var rec = new GlideRecord(table);
			rec.addEncodedQuery(q);
			rec.query();

			while(rec.next()){
				fields.forEach(function(field){
					if(that.JFLIST.indexOf(field) != -1){
						if(rgx.test(rec[field].getJournalEntry(-1))){
							counter++;
							var findings= rec[field].getJournalEntry(-1).match(rgx);
							findings.length && findings.forEach(function(match){
								match= match.replace(/\+/gm, "\\+").trim();
								var cryptedText= patternAlgo == "custom" ? that.evaluatorChatgpt(patternGr, match) : digest[patternAlgo](match);
								that.anonHAll(rgx, table, field, rec.getValue("sys_id"), match, cryptedText);
								if(rec.isValidRecord() && !that.hasIt(configGr.sys_id, table, field, rec.sys_id, match)) {
									that.setHistory(configGr.sys_id, table, field, rec.sys_id, match, cryptedText);
								}
							});
						}

					}else{
						if(rgx.test(rec[field])){
							counter++;
							findings= rec[field].match(rgx);
							
							findings.length && findings.forEach(function(match){
								match= match.replace(/\+/gm, "\\+").trim();
								var cryptedText= patternAlgo == "custom" ? that.evaluatorChatgpt(patternGr, match) : digest[patternAlgo](match);
								var ndata= rec[field].replace(new RegExp(match, 'gm'), cryptedText);
								rec.setValue(field, ndata);
								rec.update();
								if(rec.isValidRecord() && !that.hasIt(configGr.sys_id, table, field, rec.sys_id, match)) {
									that.setHistory(configGr.sys_id, table, field, rec.sys_id, match, cryptedText);
								}
							});
						}
					}
					
				});
			}
			configGr.processing= false;
			configGr.output ="Info: " + counter + " detected.";
			configGr.update();
		}catch(e){
			configGr.processing= false;
			configGr.output ="Error: " + e.message + patternAlgo;
			configGr.update();
		}
	},

	setHistory:function(id, table, field, recId, findings, nEncrypted){
		var historyGr= new GlideRecord("x_307427_table_a_0_history");
		historyGr.initialize();
		historyGr.anonymizer= id;
		historyGr.table= table;
		historyGr.field= field;
		historyGr.record= recId;
		historyGr.status= "anonymized";
		historyGr.encrypted_value= nEncrypted;
		historyGr.detected_value= findings;
		historyGr.insert();
	},
	
	canClearHistory:function(configGr){
		var rec = new GlideRecord("x_307427_table_a_0_history");
		rec.addEncodedQuery("anonymizer=" + configGr.sys_id +"^status=anonymized^ORstatus=journal");
		rec.query();
		if(rec.next()){
			return true;
		}
		return false;
	},
	
	canClearTable:function(configGr){
		var rec = new GlideRecord("x_307427_table_a_0_history");
		rec.addEncodedQuery("anonymizer=" + configGr.sys_id);
		rec.query();
		if(rec.next()){
			return true;
		}
		return false;
	},
	
	clearTable:function(configGr){
		var rec = new GlideRecord("x_307427_table_a_0_history");
		rec.addEncodedQuery("anonymizer=" + configGr.sys_id);
		rec.query();
		rec.deleteMultiple();
	},
	
	
	hasIt:function(anonymizer, table, field, recordId, detectedValue){
		var rec = new GlideRecord("x_307427_table_a_0_history");
		rec.addEncodedQuery("anonymizer="+anonymizer+"^field="+field+"^table="+table+"^record="+recordId +"^status=anonymized^ORstatus=journal^detected_value="+ detectedValue);
		rec.query();
		if(rec.next()){
			return true;
		}
		return false;
	},
	
	deleteHistoryLine:function(configGr, field, recordId){
		var patternGr= configGr.patterns.getRefRecord();
		var rgxStr = this.getpatterns(patternGr).regEx.join("|");
		var rgx= new RegExp(rgxStr, 'gm');
		var rec = new GlideRecord('sys_history_line');
		rec.addEncodedQuery('field='+field+'^set.id='+recordId);
		rec.query();
		while(rec.next()){
			rec.deleteRecord();
			if(rgx.test(rec["new"]) || rgx.test(rec["old"])){
				rec.deleteRecord();
			}
		}
	},
	
	deleteHistoryAudit:function(configGr, table, field, recordId){
		var patternGr= configGr.patterns.getRefRecord();
		var rgxStr = this.getpatterns(patternGr).regEx.join("|");
		var rgx= new RegExp(rgxStr, 'gm');
		var rec = new GlideRecord('sys_audit');
		rec.addEncodedQuery('tablename='+table+'^fieldname='+field+'^documentkey='+recordId);
		rec.query();
		while(rec.next()){
			if(rgx.test(rec.newvalue) || rgx.test(rec.oldvalue)){
				rec.deleteRecord();
			}
		}
	},

	deleteHistoryJournal:function(configGr, table, field, recordId){
		var patternGr= configGr.patterns.getRefRecord();
		var rgxStr = this.getpatterns(patternGr).regEx.join("|");
		var rgx= new RegExp(rgxStr, 'gm');
		var rec = new GlideRecord('sys_journal_field');
		rec.addEncodedQuery('name='+table+'^element='+field+'^element_id='+recordId);
		rec.query();
		while(rec.next()){
			if(rgx.test(rec.value)){
				rec.deleteRecord();
			}
		}
	},

	deleteAll:function(configGr){
		configGr.processing= true;
		configGr.update();
		
		var rec = new GlideRecord("x_307427_table_a_0_history");
		rec.addEncodedQuery("anonymizer=" + configGr.sys_id +"^status=anonymized^ORstatus=journal");
		rec.query();
		while(rec.next()){
			gs.info(JSON.stringify({a:""+rec.table, b:""+rec.field, c:""+rec.record}))
			this.deleteHistoryAudit(configGr, rec.table, rec.field, rec.record);
			this.deleteHistoryJournal(configGr, rec.table, rec.field, rec.record);
			this.deleteHistoryLine(configGr, rec.field, rec.record);
			rec.status= "deleted";
			rec.update();
		}
		
		configGr.processing= false;
		configGr.update();
	},

	anonHL:function(rgx, table, field, recordId, match, cryptedText){
		
		var rec = new GlideRecord('sys_history_line');
		rec.addEncodedQuery('field='+field+'^set.id='+recordId);
		rec.query();
		while(rec.next()){
			if(rgx.test(rec["new"])){
				rec["new"]= rec["new"].replace(new RegExp(match, 'gm'), cryptedText);
				rec.update();
			}
			if(rgx.test(rec["old"])){
				rec["old"]= rec["old"].replace(new RegExp(match, 'gm'), cryptedText);
				rec.update();
			}
		}
	},

	anonHJ:function(rgx, table, field, recordId, match, cryptedText){
		var rec = new GlideRecord('sys_journal_field');
		rec.addEncodedQuery('name='+table+'^element='+field+'^element_id='+recordId);
		rec.query();
		while(rec.next()){
			if(rgx.test(rec.value)){
				rec.value= rec["value"].replace(new RegExp(match, 'gm'), cryptedText);
				rec.update();
			}
		}
	},

	anonHAudit:function(rgx, table, field, recordId, match, cryptedText){
		var rec = new GlideRecord('sys_audit');
		rec.addEncodedQuery('tablename='+table+'^fieldname='+field+'^documentkey='+recordId);
		rec.query();
		while(rec.next()){
			if(rgx.test(rec.newvalue) || rgx.test(rec.oldvalue)){
				rec.newvalue= rec["newvalue"].replace(new RegExp(match, 'gm'), cryptedText);
				rec.update();
			}
		}
	},
	
	anonHAll:function(rgx, table, field, recordId, match, cryptedText){
		this.anonHL(rgx, "", field, recordId, match, cryptedText);
		this.anonHAudit(rgx, table, field, recordId, match, cryptedText);
		this.anonHJ(rgx, table, field, recordId, match, cryptedText);
	},
	
    type: 'anonymizerUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-07-02 11:55:34</sys_created_on>
        <sys_id>5a237b3397501110e300d200f153afe7</sys_id>
        <sys_mod_count>239</sys_mod_count>
        <sys_name>anonymizerUtil</sys_name>
        <sys_package display_value="Table Anonymizer" source="x_307427_table_a_0">167a237797101110e300d200f153af12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Table Anonymizer">167a237797101110e300d200f153af12</sys_scope>
        <sys_update_name>sys_script_include_5a237b3397501110e300d200f153afe7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-03 21:43:02</sys_updated_on>
    </sys_script_include>
</record_update>
